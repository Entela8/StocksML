<!DOCTYPE html>
<html>
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=REM:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="/style/style.css" rel="stylesheet" type="text/css">
    <title>Search Results</title>
    <link href="https://cdn.syncfusion.com/ej2/26.1.35/material.css" rel="stylesheet">
    <script src="https://cdn.syncfusion.com/ej2/26.1.35/dist/ej2.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/syncfusion-helper.js" type="text/javascript"></script>
</head>

<body>
    <h1>Search Results</h1>
    
    <h3><b>Symbol</b>: <%= result.symbol %></h3>
    <h4><b>Start</b>: <%= result.start_date %>       End:<%= result.end_date %></h4>
    <h4><b>Starting price</b>: <%= Math.round(result.start_price) %></h4>
    <h4><b>Ending price</b>: <%= Math.round(result.end_price) %></h4>
    <h4><b>Fluctuation</b>: <%= Math.round(result.fluctuation) %></h4>
    <h4><b>Fluctuation percentage</b>: <%= Math.round(result.fluctuation_percentage) %>%</h4>
    
    
    <!-- Container for the chart -->
     <div id="container" style="height: 600px; width: 100%;"></div>

     <script>
        document.addEventListener('DOMContentLoaded', function () {
            var ele = document.getElementById('container');
            if (ele) {
                ele.style.visibility = "visible";
            }

            // Parse stock data and prepare it for the chart
            const stockData = <%- JSON.stringify(result.stock_data) %>;

            // Find the min and max values for the y-axis range
            const prices = stockData.flatMap(item => [
                Math.round(item.Open),
                Math.round(item.High),
                Math.round(item.Low),
                Math.round(item.Close)
            ]);

            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const padding = (maxPrice - minPrice) * 0.1; // 10% padding

            // Format stock data for EJ2 Candle Chart
            const formattedData = stockData.map(item => ({
                x: new Date(item.Date),
                open: Math.round(item.Open),
                high: Math.round(item.High),
                low: Math.round(item.Low),
                close: Math.round(item.Close),
            }));


            // Render the Candle Chart
            var chart = new ej.charts.Chart({
                primaryXAxis: {
                    valueType: 'DateTime',
                    title: 'Date'
                },
                primaryYAxis: {
                    title: 'Price',
                    labelFormat: '${value}',
                    minimum: minPrice,
                    maximum: maxPrice,
                    interval: (maxPrice - minPrice) / 2 // Adjust interval as needed
                },
                series: [{
                    dataSource: formattedData,
                    xName: 'x',
                    yName: 'close',
                    name: '<%= result.symbol %>',
                    type: 'Candle',
                    animation: { enable: true },
                    bearFillColor: 'red',
                    bullFillColor: 'green',
                    low: 'low',
                    high: 'high',
                    open: 'open',
                    close: 'close',
                }],
                title: 'Stock Price Analysis',
                tooltip: { enable: true },
            });
            chart.appendTo('#container');
        });
    </script>

    <table border="1" style="margin: auto; text-align: center; margin-top: 60px;">
        <thead>
            <tr>
                <th>Date</th>
                <th>Open</th>
                <th>High</th>
                <th>Low</th>
                <th>Close</th>
                <th>Volume</th>
            </tr>
        </thead>

        <tbody>
            <% result.stock_data.forEach(item => { %>
                <tr>
                    <td><%= item.Date %></td>
                    <td><%= Math.round(item.Open) %></td>
                    <td><%= Math.round(item.High) %></td>
                    <td><%= Math.round(item.Low) %></td>
                    <td><%= Math.round(item.Close) %></td>
                    <td><%= Math.round(item.Volume) %></td>
                </tr>
            <% }) %>
        </tbody>
        
    </table>


</body>

</html>
